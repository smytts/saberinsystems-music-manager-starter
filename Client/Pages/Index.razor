@page "/"
@using music_manager_starter.Shared


@inject HttpClient Http
@inject IJSRuntime JSRuntime

@code {
    private List<Song> songs;
    private List<Song> filteredSongs;
    private string searchQuery;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs()
    {
        songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
        filteredSongs = songs;
    }

    private async Task DeleteSongById(Guid songId)
    {
        // Confirm deletion with the user
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this song?" });
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/songs/{songId}");
            if (response.IsSuccessStatusCode)
            {
                message = "Song deleted successfully!";
                await LoadSongs();
            }
            else
            {
                message = "Error deleting song. Please try again.";
            }
        }
    }

     private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchSongs();
        }
    }

    private async Task SearchSongs()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            // Call to API
            filteredSongs = await Http.GetFromJsonAsync<List<Song>>($"api/songs/search?query={searchQuery}");
        }
        else
        {
            // Show all songs is query is empty
            filteredSongs = songs;
        }
    }
}

<div class="p-0 min-h-screen bg-pattern flex flex-col items-center justify-center">
    <h2 class="text-3xl font-bold text-white mb-8 text-center">Song Library</h2>

    <!-- Search Bar -->
    <input type="text" 
       @bind="searchQuery" 
       @onkeydown="HandleKeyDown" 
       placeholder="Search..." 
       class="mb-4 p-2 border border-gray-300 rounded" />

    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
        @if (filteredSongs != null && filteredSongs.Count > 0)
        {
            @foreach (var song in filteredSongs)
            {
                        <div class="glass p-6 border border-gray-300 rounded-lg text-white transition-transform transform hover:scale-105 hover:shadow-xl cursor-pointer">
                            <h3 class="text-xl font-semibold mb-2">@song.Title</h3>
                            <p class="text-md">Artist: <span class="font-light">@song.Artist</span></p>
                            <p class="text-md">Album: <span class="font-light">@song.Album</span></p>
                            <p class="text-md">Genre: <span class="font-light">@song.Genre</span></p>

                            <!-- Delete Button -->
                            <button @onclick="() => DeleteSongById(song.Id)" class="mt-4 bg-red-600 text-white px-2 py-1 rounded mx-auto block">
                                Delete
                            </button>
                        </div>
            }
        }
        else
        {
                <div class="col-span-1 text-center text-gray-400">No songs found.</div>
        }
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
            <div class="text-green-500 mt-4">@message</div>
    }
</div>

<style>
    .bg-pattern {
        background: linear-gradient(rgba(31, 41, 55, 0.7), rgba(31, 41, 55, 0.7)), url('dalle.webp');
        background-size: cover;
        background-position: center;
        font-family: 'Rajdhani', sans-serif;
    }

    .glass {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        position: relative;
        overflow: hidden;
    }

    .glass:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        pointer-events: none;
    }
</style>